def mines_compteur(r, c):
    count = 0
    for dr in [-1, 0, 1]:
        for dc in [-1, 0, 1]:#y'a juste ces 3 options(-1,0,1) cad recule,rester et avancer
            if dr == 0 and dc == 0:
                continue
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) in mine_positions:
                count += 1
    return count

#devoiler la case si un clique gauche
def clique_gauche(r, c):
    if (r, c) in flagged or (r, c) in devoile:
        return

    if (r, c) in mine_positions:
        # clique sur la position d'une mine et le jeu se termine
        for (mr, mc) in mine_positions:
            boutons[mr][mc].config(text="*", bg="red")
        messagebox.showinfo("jeu termine", "t'es mort   ")
        root.quit()
        return

    devoile.add((r, c))
    mines_nearby = mines_compteur(r, c)

    if mines_nearby > 0:
        boutons[r][c].config(text=str(mines_nearby), relief=tk.SUNKEN) # des effets speciaux :)
    else:
        boutons[r][c].config(text="", relief=tk.SUNKEN)
        # si autour de ce case c tous des cases safes, ils se devoilent directement
        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                if dr == 0 and dc == 0:
                    continue
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in devoile:
                    clique_gauche(nr, nc)

    # derriere verfication de gagner
    if len(devoile) == rows * cols - mines:
        messagebox.showinfo("felicitation", "t'as gagne！")
        root.quit()



def clique_droit(r, c):
    if (r, c) in devoile:
        return

    if (r, c) in flagged:
        flagged.remove((r, c))
        boutons[r][c].config(text="", bg="SystemButtonFace")
    else:
        flagged.add((r, c))
        boutons[r][c].config(text="F", bg="yellow")

#------------------------------------------------------------------------------ jeu ------------------------------------------
# |      ------  |------|
# |      |___    |      |
# |      |       |      |
# |______|______ |------|
rows = 15
cols = 27
mines = 35

root = tk.Tk()
root.title("Demineur")
boutons = []

mine_positions = set()
flagged = set()
devoile = set()
# set() comme ca ya pas repetitions

# mise en pkace des mines aleatoires
while len(mine_positions) < mines:
    r = random.randint(0, rows - 1)
    c = random.randint(0, cols - 1)
    mine_positions.add((r, c))
'''''''''''''''''''''''''''''''''''''''''this part doesnt need to be learned
for r in range(rows):
    row_buttons = []
    for c in range(cols):
        btn = tk.Button(root, width=2, height=1,
                        command=lambda r=r, c=c: clique_gauche(r, c))
        btn.bind("<Button-3>", lambda event, r=r, c=c: clique_droit(r, c))
        btn.grid(row=r, column=c)
        row_buttons.append(btn)
    boutons.append(row_buttons)
'''''''''''''''''''''''''''''''''''''''''
root.mainloop()
