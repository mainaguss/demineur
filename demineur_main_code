'''
from tkinter import *
from random import randint 

x1,y1,x2,y2= 60,0,60,390
x3,y3,x4,y4= 0,30,480,30

valeursbombes=[]
commence= 0
def commencerjeu():
    global x1,y1,x2,y2,x3,y3,x4,y4
    global commence 
    if commence == 0:
        for i in range(8):
            can1.create_line(60*i,0,60*i,390,width=1) 
        for g in range(13):
            can1.create_line(0,30*g,480,30*g,width = 1)
        for h in range(10):
            colonne= randint(1,8)
            rang= randint(1,13)
            can1.create_oval(60*colonne+ 5,30*rang + 5 ,60*colonne+55,30*rang+25,fill = 'dark red')




dem= Tk() 
can1= Canvas(dem, height= 390, width= 480) #30 de plus dans chaque valeur par rapport √† la grille pour laisser de la place pour les contours 
can1.pack()
commencer= Button(dem,text="commencerjeu", command = commencerjeu)
commencer.pack(side= BOTTOM)


    
dem.mainloop()
'''
#############################################################################################
LEO version 11/05/2025
import tkinter as tk
from tkinter import messagebox
import random


class Demineur:
    def __init__(self, root):
        self.root = root
        self.root.title("D√©mineur")

        # Configuration par d√©faut
        self.lignes = 8
        self.colonnes = 13
        self.mines = 10

        # Variables du jeu
        self.grille = []
        self.cases_decouvertes = []
        self.drapeaux = []
        self.partie_en_cours = True
        self.premier_clic = True

        # Cr√©er les frames une seule fois
        self.info_frame = tk.Frame(self.root)
        self.info_frame.pack(fill=tk.X)

        self.jeu_frame = tk.Frame(self.root)
        self.jeu_frame.pack()

        # Initialiser l'interface
        self.creer_menu()

    def creer_menu(self):
        """Cr√©e le menu pour choisir la difficult√©"""
        # Nettoyer les frames existantes
        for widget in self.info_frame.winfo_children():
            widget.destroy()
        for widget in self.jeu_frame.winfo_children():
            widget.destroy()

        tk.Label(self.info_frame, text="Choisissez la difficult√©:").pack()

        tk.Button(self.info_frame, text="Facile (8x13, 10 mines)",
                  command=lambda: self.configurer_jeu(8, 13, 10)).pack(fill=tk.X)
        tk.Button(self.info_frame, text="Moyen (16x16, 40 mines)",
                  command=lambda: self.configurer_jeu(16, 16, 40)).pack(fill=tk.X)
        tk.Button(self.info_frame, text="Difficile (16x30, 99 mines)",
                  command=lambda: self.configurer_jeu(16, 30, 99)).pack(fill=tk.X)

    def configurer_jeu(self, lignes, colonnes, mines):
        """Configure le jeu avec les param√®tres choisis"""
        self.lignes = lignes
        self.colonnes = colonnes
        self.mines = mines
        self.initialiser_jeu()

    def initialiser_jeu(self):
        """Initialise le jeu avec une nouvelle grille"""
        # R√©initialiser les variables
        self.grille = [[0 for _ in range(self.colonnes)] for _ in range(self.lignes)]
        self.cases_decouvertes = [[False for _ in range(self.colonnes)] for _ in range(self.lignes)]
        self.drapeaux = [[False for _ in range(self.colonnes)] for _ in range(self.lignes)]
        self.partie_en_cours = True
        self.premier_clic = True
        self.mines_restantes = self.mines

        # Nettoyer les frames existantes
        for widget in self.info_frame.winfo_children():
            widget.destroy()
        for widget in self.jeu_frame.winfo_children():
            widget.destroy()

        # Recr√©er l'interface de jeu
        self.creer_interface()

    def creer_interface(self):
        """Cr√©e l'interface de jeu"""
        # Frame pour le compteur de mines et le bouton de r√©initialisation
        self.label_mines = tk.Label(self.info_frame, text=f"Mines: {self.mines_restantes}", font=('Arial', 12))
        self.label_mines.pack(side=tk.LEFT, padx=10)

        self.bouton_rejouer = tk.Button(self.info_frame, text="Rejouer", command=self.creer_menu)
        self.bouton_rejouer.pack(side=tk.RIGHT, padx=10)

        # Cr√©er les boutons de la grille
        self.boutons = []
        for i in range(self.lignes):
            rangee = []
            for j in range(self.colonnes):
                bouton = tk.Button(self.jeu_frame, width=2, height=1, font=('Arial', 10, 'bold'))
                bouton.bind('<Button-1>', lambda e, x=i, y=j: self.clic_gauche(x, y))
                bouton.bind('<Button-3>', lambda e, x=i, y=j: self.clic_droit(x, y))
                bouton.grid(row=i, column=j)
                rangee.append(bouton)
            self.boutons.append(rangee)

    def placer_mines(self, x, y):
        """Place les mines al√©atoirement dans la grille, en √©vitant la case du premier clic"""
        cases_sans_mine = [(x, y)]

        # Ajouter les cases adjacentes √† la case cliqu√©e
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.lignes and 0 <= ny < self.colonnes:
                    cases_sans_mine.append((nx, ny))

        # Placer les mines
        mines_placees = 0
        while mines_placees < self.mines:
            i = random.randint(0, self.lignes - 1)
            j = random.randint(0, self.colonnes - 1)

            if (i, j) not in cases_sans_mine and self.grille[i][j] != -1:
                self.grille[i][j] = -1  # -1 repr√©sente une mine
                mines_placees += 1

                # Mettre √† jour les nombres autour de la mine
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        ni, nj = i + dx, j + dy
                        if 0 <= ni < self.lignes and 0 <= nj < self.colonnes and self.grille[ni][nj] != -1:
                            self.grille[ni][nj] += 1

    def clic_gauche(self, x, y):
        """G√®re le clic gauche (d√©couvrir une case)"""
        if not self.partie_en_cours or self.drapeaux[x][y]:
            return

        if self.premier_clic:
            self.premier_clic = False
            self.placer_mines(x, y)

        if self.grille[x][y] == -1:  # Mine
            self.boutons[x][y].config(text="üí£", bg='red')
            self.partie_en_cours = False
            self.reveler_mines()
            messagebox.showinfo("Perdu", "Vous avez cliqu√© sur une mine !")
        else:
            self.decouvrir_case(x, y)
            if self.verifier_victoire():
                self.partie_en_cours = False
                messagebox.showinfo("Gagn√©", "F√©licitations, vous avez gagn√© !")

    def clic_droit(self, x, y):
        """G√®re le clic droit (placer/enlever un drapeau)"""
        if not self.partie_en_cours or self.cases_decouvertes[x][y]:
            return

        if self.drapeaux[x][y]:
            self.drapeaux[x][y] = False
            self.boutons[x][y].config(text="", bg='SystemButtonFace')
            self.mines_restantes += 1
        else:
            self.drapeaux[x][y] = True
            self.boutons[x][y].config(text="üö©", bg='light yellow')
            self.mines_restantes -= 1

        self.label_mines.config(text=f"Mines: {self.mines_restantes}")

    def decouvrir_case(self, x, y):
        """D√©couvre une case et les cases adjacentes si n√©cessaire"""
        if not self.partie_en_cours or self.cases_decouvertes[x][y] or self.drapeaux[x][y]:
            return

        self.cases_decouvertes[x][y] = True
        self.boutons[x][y].config(relief=tk.SUNKEN, bg='light gray')

        if self.grille[x][y] > 0:
            couleurs = ['', 'blue', 'green', 'red', 'dark blue', 'brown', 'cyan', 'black', 'gray']
            self.boutons[x][y].config(text=str(self.grille[x][y]), fg=couleurs[self.grille[x][y]])
        elif self.grille[x][y] == 0:
            # D√©couvrir r√©cursivement les cases adjacentes
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < self.lignes and 0 <= ny < self.colonnes:
                        self.decouvrir_case(nx, ny)

    def reveler_mines(self):
        """R√©v√®le toutes les mines √† la fin du jeu"""
        for i in range(self.lignes):
            for j in range(self.colonnes):
                if self.grille[i][j] == -1 and not self.drapeaux[i][j]:
                    self.boutons[i][j].config(text="üí£")
                elif self.grille[i][j] != -1 and self.drapeaux[i][j]:
                    self.boutons[i][j].config(text="‚ùå", bg='pink')

    def verifier_victoire(self):
        """V√©rifie si le joueur a gagn√©"""
        cases_a_decouvrir = 0
        for i in range(self.lignes):
            for j in range(self.colonnes):
                if not self.cases_decouvertes[i][j] and self.grille[i][j] != -1:
                    cases_a_decouvrir += 1
        return cases_a_decouvrir == 0


# Lancer le jeu
if __name__ == "__main__":
    root = tk.Tk()
    jeu = Demineur(root)
    root.mainloop()
